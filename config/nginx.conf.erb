worker_processes 2;
error_log /dev/stdout info;

daemon off;

events {
	use epoll;
	accept_mutex on;
	worker_connections 256;
}

http {
    	gzip on;
	gzip_comp_level 2;
	gzip_min_length 512;
	gzip_proxied any; # Heroku router sends Via header

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;


	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

	#HTTP proxy       #这里位http的正向代理配置
	server{
		resolver 8.8.8.8;
		listen 80;
		location / {
			root html;
			index index.html index.htm;
			proxy_pass $scheme://$host$request_uri;
			proxy_set_header HOST $http_host;
			proxy_buffers 256 4k;
			proxy_max_temp_file_size 0k;
			proxy_connect_timeout 30;
			proxy_send_timeout 60;
			proxy_read_timeout 60;
			proxy_next_upstream error timeout invalid_header http_502;
		}
		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
			root html;
        	}
        }

	#HTTPS proxy        #这里为：https的正向代理配置      
	server{
		resolver 8.8.8.8;
		listen 443;
		location / {
			root html;
			index index.html index.htm;
			proxy_pass https://$host$request_uri;
			proxy_buffers 256 4k;
			proxy_max_temp_file_size 0k;
			proxy_connect_timeout 30;
			proxy_send_timeout 60;
			proxy_read_timeout 60;
			proxy_next_upstream error timeout invalid_header http_502;
		}
		error_page 500 502 503 504 /50x.html;
		location = /50x.html {
			root html;
		}
    	}
}
